{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "PINS23",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#atom_types"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#identifiers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#comments"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.other.fn.pins23",
          "match": "\\bfun\\b"
        },
        {
          "name": "keyword.other.pins23 storage.type.pins23",
          "match": "\\b(typ|var)\\b"
        },
        {
          "name": "keyword.control",
          "match": "\\b(arr|else|for|if|then|where|while)\\b"
        }
      ]
    },
    "atom_types": {
      "name": "entity.name.type",
      "match": "\\b(logical|integer|string)\\b"
    },
    "constants": {
      "patterns": [
        {
          "match": "\\b(true|false)\\b",
          "name": "constant.language.boolean.pins23"
        },
        {
          "match": "\\b\\d+\\b",
          "name": "constant.numeric.integer.pins23"
        },
        {
          "name": "string.quoted.single.pins23",
          "begin": "'",
          "end": "'",
          "illegal": "\\n",
          "patterns": [
            {
              "name": "constant.character.escape.apostrophe.pins23",
              "match": "''"
            }
          ]
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.pins23",
          "match": "\\b[A-Za-z_][A-Za-z_0-9]*\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.math.pins23",
          "match": "\\+|-|\\*|/|%"
        },
        {
          "name": "keyword.operator.comparison.pins23",
          "match": "==|!=|<=|>=|<|>"
        },
        {
          "name": "keyword.operator.logical.pins23",
          "match": "&&|!|\\|\\|"
        },
        {
          "name": "keyword.operator.key-value.pins23",
          "match": ":"
        },
        {
          "name": "punctuation.semi.pins23",
          "match": ";"
        },
        {
          "name": "keyword.operator.access.dot.pins23",
          "match": "\\."
        },
        {
          "name": "punctuation.comma.pins23",
          "match": ","
        },
        {
          "name": "keyword.operator.assignment.equal.pins23",
          "match": "="
        },
        {
          "name": "punctuation.brackets.round.pins23",
          "match": "\\(|\\)"
        },
        {
          "name": "punctuation.brackets.square.pins23",
          "match": "\\[|\\]"
        },
        {
          "name": "punctuation.brackets.curly.pins23",
          "match": "\\{|\\}"
        }
      ]
    },
    "comments": {
      "begin": "#",
      "end": "$",
      "name": "comment.line.pins23",
      "patterns": [
        {
          "match": "\\s+$",
          "name": "invalid.deprecated.trailing-whitespace.pins23"
        }
      ]
    }
  },
  "scopeName": "source.pins23"
}
